// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}

model User {
  id           String       @id @default(uuid())
  matricNo     String?      @unique
  password     String
  email        String       @unique
  department   String
  faculty      String
  level        String?
  firstName    String
  lastName     String
  otherNames   String
  profileImage String
  role         Role         @default(STUDENT)
  createdAt    DateTime     @default(now())
  
  // Relationships
  lecturerCourses  Course[]     @relation("CourseLecturer")
  enrolledCourses  Course[]     @relation("CourseStudents")
  createdAssignments Assignment[] 
  submissions      Submission[]
  gradedSubmissions Submission[] @relation("GradedSubmissions")
}

model Course { 
  id          String     @id @default(uuid())
  title       String     @unique
  courseCode  String  
  createdAt   DateTime   @default(now())
  
  // Relationships
  lecturer    User       @relation(fields: [lecturerId], references: [id], name: "CourseLecturer")
  lecturerId  String
  students    User[]     @relation(name: "CourseStudents")
  assignments Assignment[]
}

model Assignment {
  id          String       @id @default(uuid())
  title       String
  description String
  dueDate     DateTime
  category    String
  type        AssignmentType @default(DOCUMENT_UPLOAD)
  createdAt   DateTime     @default(now())
  
  // Relationships
  course      Course      @relation(fields: [courseId], references: [id])
  courseId    String
  files       File[]
  questions   Question[]
  submissions Submission[]
  lecturer    User        @relation(fields: [lecturerId], references: [id])
  lecturerId  String
}

model Question {
  id          String     @id @default(uuid())
  question    String
  answer      String
  options     String
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model File { 
  id          String     @id @default(uuid())
  fileUrl     String
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
}

model Submission {
  id           String     @id @default(uuid())
  fileUrl      String?
  quizAnswers  Json?      // Store quiz answers as JSON
  submittedAt  DateTime   @default(now())
  grade        Int?       @default(0)
  gradedAt     DateTime?
  
  // Relationships
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  gradedBy     User?      @relation(fields: [gradedById], references: [id], name: "GradedSubmissions")
  gradedById   String?
}

enum Role {
  STUDENT
  LECTURER
}

enum AssignmentType {
  DOCUMENT_UPLOAD
  QUIZ
}